package edu.cursor.service;import edu.cursor.entities.Place;import edu.cursor.entities.Trip;import edu.cursor.entities.User;import edu.cursor.exceptions.DataNotFoundException;import edu.cursor.repository.PlaceRepository;import edu.cursor.repository.TripRepository;import edu.cursor.repository.UserRepository;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Service@RequiredArgsConstructorpublic class TripServiceImpl implements TripService {    private final TripRepository tripRepository;    private final UserRepository userRepository;    private final PlaceRepository placeRepository ;    @Override    public Trip addTrip(Long userId, Trip trip) {        User user = userRepository.findById(userId).orElseThrow(() -> new DataNotFoundException("The user doesn't found"));        List<Place> places = trip.getPlaces();        List<Place> places2 = new ArrayList<>();        for (Place p:places) {            places2.add(placeRepository.save(p));        }        trip.setPlaces(places2);        List<User> usersForThisTrip = trip.getUsers();        usersForThisTrip.add(user);        trip.setUsers(usersForThisTrip);        return tripRepository.save(trip);    }    @Override    public void deleteTripById(Long id) {        tripRepository.deleteById(id);    }    @Override    public Trip editTripById(Long userId,Long tripId, Trip trip) {        Trip editedTrip = tripRepository.findById(tripId).orElseThrow(() -> new DataNotFoundException("The trip doesn't found"));        editedTrip.setName(trip.getName());        editedTrip.getUsers();        List<Place> places = trip.getPlaces();        List<Place> places2 = new ArrayList<>();        for (Place p:places) {            places2.add(placeRepository.save(p));        }        editedTrip.setPlaces(places2);       return tripRepository.save(editedTrip);    }    @Override    public Trip shareTripWithOtherUser(Long tripId, Long userId) {        Trip editedTrip = tripRepository.findById(tripId).orElseThrow(() -> new DataNotFoundException("The trip doesn't found"));        List<User> users = editedTrip.getUsers();        users.add(userRepository.findById(userId).orElseThrow(() -> new DataNotFoundException("The user doesn't found")));        editedTrip.setUsers(users);        return tripRepository.save(editedTrip);    }    @Override    public Trip findTripById(Long id) {        return tripRepository.findById(id).orElseThrow(() -> new DataNotFoundException("The trip doesn't found"));    }    @Override    public List<Trip> findAll() {        return tripRepository.findAll();    }}