package edu.cursor.service;import edu.cursor.entities.Trip;import edu.cursor.entities.User;import edu.cursor.exceptions.DataNotFoundException;import edu.cursor.repository.TripRepository;import edu.cursor.repository.UserRepository;import lombok.AllArgsConstructor;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import java.util.List;@Service@RequiredArgsConstructorpublic class TripServiceImpl implements TripService {    private final TripRepository tripRepository;    private final UserRepository userRepository;    @Override    public Trip addTrip(Long userId, Trip trip) {        User user = userRepository.findById(userId).orElseThrow(() -> new DataNotFoundException("The user doesn't found"));        List<User> userForThisTrip = trip.getUsers();        userForThisTrip.add(user);        trip.setUsers(userForThisTrip);        List<Trip> trips = user.getTrips();        trips.add(trip);        user.setTrips(trips);        userRepository.save(user);        return tripRepository.save(trip);    }    @Override    public void deleteTripById(Long id) {        tripRepository.deleteById(id);    }    @Override    public void editTripById(Long userId,Long tripId, Trip trip) {                User user = userRepository.findById(userId).orElseThrow(() -> new DataNotFoundException("The user doesn't found"));        List<Trip> trips = user.getTrips();        Trip editedTrip = trips.stream()                .filter(trip1 -> trip1.getId().equals(tripId))                .findFirst()                .orElseThrow(() -> new DataNotFoundException("The trip doesn't found"));        editedTrip.setName(trip.getName());        editedTrip.setPlaces(trip.getPlaces());        tripRepository.save(editedTrip);    }    @Override    public void shareTripWithOtherUser(Long tripId, Long userId) {        Trip editedTrip = tripRepository.findById(tripId).orElseThrow(() -> new DataNotFoundException("The trip doesn't found"));        List<User> users = editedTrip.getUsers();        users.add(userRepository.findById(userId).orElseThrow(() -> new DataNotFoundException("The user doesn't found")));        editedTrip.setUsers(users);        tripRepository.save(editedTrip);    }    @Override    public Trip findTripById(Long id) {        return tripRepository.findById(id).orElseThrow(() -> new DataNotFoundException("The trip doesn't found"));    }}